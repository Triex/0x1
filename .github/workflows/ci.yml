name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Run tests
        run: bun test

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Run ESLint
        run: bun run eslint .
        
      - name: Run TypeScript type checking
        run: bun run tsc --noEmit
        
  version-sync:
    name: Version Sync
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for version changes in package.json
        id: check-version
        run: |
          # Get the current and previous version from package.json
          CURRENT_VERSION=$(grep '"version":' package.json | head -1 | awk -F: '{ print $2 }' | sed 's/[", ]//g')
          git checkout HEAD~1 package.json
          PREVIOUS_VERSION=$(grep '"version":' package.json | head -1 | awk -F: '{ print $2 }' | sed 's/[", ]//g')
          git checkout HEAD package.json
          
          # Check if version has changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $CURRENT_VERSION"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: No version change detected (skipping sync)
        if: steps.check-version.outputs.version_changed != 'true'
        run: echo "::notice::No version change detected in package.json. Skipping version sync."
        # This step always succeeds, preventing the job from failing when no version change
      
      - name: Setup Bun
        if: steps.check-version.outputs.version_changed == 'true'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        if: steps.check-version.outputs.version_changed == 'true'
        run: bun install
      
      - name: Run update-version script
        if: steps.check-version.outputs.version_changed == 'true'
        run: bun run update-version
        
      - name: Build framework
        if: steps.check-version.outputs.version_changed == 'true'
        run: bun run build
        
      - name: Commit changes
        if: steps.check-version.outputs.version_changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "chore: sync version to ${{ steps.check-version.outputs.new_version }} across codebase"
          
      - name: Push changes
        if: steps.check-version.outputs.version_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
