/**
 * Tailwind CSS v4 Handler for 0x1 Framework
 * 
 * Provides zero-config integration with Tailwind CSS v4,
 * following Next.js 15's approach where Tailwind "just works".
 */

import type { Subprocess } from "bun";
import { existsSync, readFileSync, unlinkSync, watch, writeFileSync } from "fs";
import { mkdir, stat } from "fs/promises";
import { dirname, extname, join } from "path";
import { logger } from "../../utils/logger";

// Cache for processed CSS to avoid redundant processing
const cssCache: Record<string, { content: string; timestamp: number; contentType: string }> = {};

// Store in-memory cache of processed CSS
let processedTailwindCss: string | null = null;
// @ts-ignore - this is actually reassigned
let lastProcessedTime = 0;

// Debounce control variables for Tailwind processing
// @ts-ignore - these are actually reassigned
let processingTailwind = false;
// @ts-ignore - these are actually reassigned
let processingQueued = false;
let lastLogTime = 0; // Last time we logged a Tailwind processing message
const LOG_THROTTLE_MS = 5000; // Only log every 5 seconds to reduce log spam

// Track temporary files for cleanup
const tempFiles: string[] = [];

/**
 * Find Tailwind CSS input file
 */
export async function findTailwindCssInput(
  projectPath: string
): Promise<string | null> {
  const possiblePaths = [
    "src/styles/globals.css",
    "src/styles/main.css",
    "src/styles/index.css",
    "src/index.css",
    "styles/globals.css",
    "styles/main.css",
    "styles/index.css",
    "public/styles.css",
    "app/globals.css",
  ];

  for (const path of possiblePaths) {
    const fullPath = join(projectPath, path);
    if (existsSync(fullPath)) {
      return fullPath;
    }
  }

  // If no existing file is found, create one in the standard location
  const defaultPath = join(projectPath, "src/styles/globals.css");
  try {
    // Create directory if it doesn't exist
    await mkdir(dirname(defaultPath), { recursive: true });
    
    // Create a basic Tailwind CSS file
    const basicTailwindCss = `@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`;
    writeFileSync(defaultPath, basicTailwindCss, "utf8");
    
    logger.info(`Created default Tailwind CSS file at ${defaultPath}`);
    return defaultPath;
  } catch (error) {
    logger.error(`Failed to create default Tailwind CSS file: ${error}`);
    return null;
  }
}

/**
 * Find Tailwind CSS executable in various locations
 */
export function findTailwindExecutable(projectPath: string): string | null {
  const possiblePaths = [
    // Local node_modules
    join(projectPath, 'node_modules/.bin/tailwindcss'),
    join(projectPath, 'node_modules/tailwindcss/lib/cli.js'),
    
    // Global installations
    '/usr/local/bin/tailwindcss',
    
    // For Bun users
    join(process.env.HOME || '', '.bun/bin/tailwindcss'),
  ];

  // Check for direct executables
  for (const path of possiblePaths) {
    if (existsSync(path)) {
      logger.debug(`Found Tailwind CSS executable at: ${path}`);
      return path;
    }
  }

  // Check if we can use package runners
  const packageRunners = ['bunx', 'npx', 'pnpx', 'yarn'];
  for (const runner of packageRunners) {
    try {
      // Test if the runner can find tailwindcss
      const testProcess = Bun.spawnSync([runner, 'tailwindcss', '--help'], {
        stdout: 'pipe',
        stderr: 'pipe'
      });
      
      if (testProcess.exitCode === 0) {
        logger.debug(`Found Tailwind CSS via ${runner}`);
        return `${runner} tailwindcss`;
      }
    } catch (error) {
      // Continue to next runner
      continue;
    }
  }

  logger.debug('No Tailwind CSS executable found');
  return null;
}

/**
 * Start Tailwind CSS process for development
 */
export async function startTailwindProcess(
  projectPath: string,
  inputFile: string
): Promise<Subprocess | null> {
  try {
    // Generate a temporary config file if one doesn't exist
    const configPath = join(projectPath, "tailwind.config.js");
    if (!existsSync(configPath)) {
      const basicConfig = `
module.exports = {
  content: [
    "./app/**/*.{js,jsx,ts,tsx}",
    "./src/**/*.{js,jsx,ts,tsx}",
    "./components/**/*.{js,jsx,ts,tsx}"
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
`;
      writeFileSync(configPath, basicConfig, "utf8");
      logger.info(`Created default Tailwind config at ${configPath}`);
    }

    // Set up the output file path
    const outputPath = join(projectPath, "public/styles.css");
    
    // Create the public directory if it doesn't exist
    if (!existsSync(dirname(outputPath))) {
      await mkdir(dirname(outputPath), { recursive: true });
    }

    // Check if tailwindcss binary is available
    const hasTailwindBinary = await Bun.$`which tailwindcss`.text().then(() => true).catch(() => false);
    
    if (!hasTailwindBinary) {
      logger.warn(`Tailwind CSS binary not found. Consider installing it globally with: bun add -g tailwindcss`);
      return null;
    }

    // Start the Tailwind CSS watcher process
    const tailwindProcess = Bun.spawn([
      "tailwindcss",
      "-i",
      inputFile,
      "-o",
      outputPath,
      "--watch",
    ], {
      cwd: projectPath,
      stderr: "pipe",
      stdout: "pipe",
    });

    // Log output from the Tailwind process
    const { stdout, stderr } = tailwindProcess;
    if (stdout) {
      const stdoutReader = stdout.getReader();
      (async () => {
        let reading = true;
        while (reading) {
          const { done, value } = await stdoutReader.read();
          if (done) {
            reading = false;
            break;
          }
          const text = new TextDecoder().decode(value);
          if (text.includes("Done")) {
            logger.info("✓ Tailwind CSS compiled successfully");
          } else if (!text.trim().startsWith("warn")) {
            logger.debug(`[Tailwind] ${text.trim()}`);
          }
        }
      })();
    }

    if (stderr) {
      const stderrReader = stderr.getReader();
      (async () => {
        let reading = true;
        while (reading) {
          const { done, value } = await stderrReader.read();
          if (done) {
            reading = false;
            break;
          }
          const text = new TextDecoder().decode(value);
          logger.error(`[Tailwind] ${text.trim()}`);
        }
      })();
    }

    logger.info(`Started Tailwind CSS watcher (PID: ${tailwindProcess.pid})`);
    return tailwindProcess;
  } catch (error) {
    logger.error(`Failed to start Tailwind CSS process: ${error}`);
    return null;
  }
}

/**
 * Process a CSS file
 */
export async function processFile(filePath: string, projectPath: string): Promise<string> {
  try {
    // Read the file
    const content = await Bun.file(filePath).text();
    
    // Simple processing for now
    return content;
  } catch (error) {
    logger.error(`Failed to process CSS file ${filePath}: ${error}`);
    return '/* Error processing CSS file */';
  }
}

/**
 * Serve processed Tailwind CSS
 */
export function getProcessedTailwindCss(): { content: string; contentType: string } {
  return {
    content: processedTailwindCss || '/* Tailwind CSS processing pending */',
    contentType: 'text/css; charset=utf-8'
  };
}

/**
 * Initialize Tailwind CSS v4 for a project
 * Sets up all necessary configurations and ensures Tailwind is installed
 */
export async function initializeTailwind(projectPath: string): Promise<boolean> {
  try {
    logger.info("Initializing Tailwind CSS v4...");
    
    // Check if Tailwind is installed
    const packageJsonPath = join(projectPath, "package.json");
    if (!existsSync(packageJsonPath)) {
      logger.error("package.json not found. Cannot initialize Tailwind.");
      return false;
    }
    
    // Read package.json to check if Tailwind is installed
    const packageJson = JSON.parse(readFileSync(packageJsonPath, "utf-8"));
    const hasTailwind = packageJson.dependencies?.tailwindcss || packageJson.devDependencies?.tailwindcss;
    
    if (!hasTailwind) {
      logger.info("Tailwind CSS not found in dependencies. Installing Tailwind CSS v4...");
      
      try {
        // Try to install Tailwind using Bun
        const install = Bun.spawn(["bun", "add", "-d", "tailwindcss", "@tailwindcss/postcss", "postcss"], { 
          cwd: projectPath,
          stdio: ["ignore", "pipe", "pipe"] 
        });
        
        // Wait for installation to complete
        const exitCode = await install.exited;
        
        if (exitCode === 0) {
          logger.success("Tailwind CSS v4 installed successfully with Bun!");
        } else {
          logger.error("Failed to install Tailwind CSS with Bun");
          return false;
        }
      } catch (err) {
        logger.error(`Failed to install Tailwind CSS: ${err}`);
        return false;
      }
    }
    
    // Ensure config files exist
    await ensureTailwindConfig(projectPath);
    await ensureGlobalCss(projectPath);
    
    // Generate initial CSS
    return await processTailwindCss(projectPath);
  } catch (error) {
    logger.error(`Error initializing Tailwind CSS: ${error}`);
    return false;
  }
}

/**
 * Ensure Tailwind config exists, create if not
 */
async function ensureTailwindConfig(projectPath: string): Promise<void> {
  const configPath = join(projectPath, "tailwind.config.js");
  
  if (!existsSync(configPath)) {
    logger.info("Creating Tailwind config file...");
    
    // Modern patterns for finding content
    const contentPatterns = [
      "./app/**/*.{js,ts,jsx,tsx}",
      "./components/**/*.{js,ts,jsx,tsx}",
      "./lib/**/*.{js,ts,jsx,tsx}",
      "./src/**/*.{js,ts,jsx,tsx,html}"
    ];
    
    const configContent = `/** @type {import('tailwindcss').Config} */
export default {
  content: ${JSON.stringify(contentPatterns, null, 2)},
  // Tailwind v4 uses class strategy for dark mode
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        primary: {
          DEFAULT: '#4f46e5', // Indigo 600 color
          50: '#eef2ff',
          100: '#e0e7ff',
          200: '#c7d2fe',
          300: '#a5b4fc',
          400: '#818cf8',
          500: '#6366f1',
          600: '#4f46e5',
          700: '#4338ca',
          800: '#3730a3',
          900: '#312e81',
          950: '#1e1b4b'
        },
        secondary: {
          DEFAULT: '#10b981', // Emerald 500 color
          50: '#ecfdf5',
          100: '#d1fae5',
          200: '#a7f3d0',
          300: '#6ee7b7',
          400: '#34d399',
          500: '#10b981',
          600: '#059669',
          700: '#047857',
          800: '#065f46',
          900: '#064e3b',
          950: '#022c22'
        }
      }
    },
  },
  // Tailwind v4 features and plugins
  future: {
    hoverOnlyWhenSupported: true,
    respectDefaultRingColorOpacity: true,
    disableColorOpacityUtilitiesByDefault: true,
    relativeContentPathsByDefault: true
  },
  plugins: [],
}`;
    
    writeFileSync(configPath, configContent);
    logger.success("Created Tailwind config file.");
  }
}

/**
 * Ensure globals.css exists, create if not
 */
async function ensureGlobalCss(projectPath: string): Promise<void> {
  // Determine if we're in the framework root directory (not a template or project)
  const isFrameworkRoot = (
    // Check for framework directory markers
    existsSync(join(projectPath, 'src/cli/commands')) && 
    existsSync(join(projectPath, 'scripts/build-framework.ts')) &&
    // Not in a template directory
    !projectPath.includes('/templates/')
  );
  
  // Skip CSS creation for the framework root directory
  if (isFrameworkRoot) {
    logger.debug("Skipping CSS creation for framework root directory");
    return;
  }
  
  // Check for Next.js style app directory first (modern approach)
  const appDir = join(projectPath, "app");
  const appGlobalsCssPath = join(appDir, "globals.css");
  
  // Fallback to src directory (traditional approach)
  const srcDir = join(projectPath, "src");
  const srcAppCssPath = join(srcDir, "app.css");
  
  // Prepare Tailwind CSS content
  const tailwindCssContent = `@import "tailwindcss";

/* Custom styles go here */
:root {
  --foreground-rgb: 0, 0, 0;
  --background-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-rgb));
}
`;
  
  // Check for Next.js app directory structure first
  if (existsSync(appDir)) {
    if (!existsSync(appGlobalsCssPath)) {
      logger.info("Creating globals.css file in app directory...");
      writeFileSync(appGlobalsCssPath, tailwindCssContent);
      logger.success("Created globals.css file in app directory.");
    } else {
      // Update existing globals.css to include Tailwind import if needed
      const content = readFileSync(appGlobalsCssPath, 'utf-8');
      if (!content.includes('@import "tailwindcss"') && !content.includes('@tailwind')) {
        logger.info("Updating globals.css with Tailwind import...");
        writeFileSync(appGlobalsCssPath, `@import "tailwindcss";

${content}`);
        logger.success("Updated globals.css with Tailwind import.");
      }
    }
    return;
  }
  
  // Fallback to src directory structure (only for actual projects, not the framework itself)
  if (!existsSync(srcDir)) {
    await mkdir(srcDir, { recursive: true });
  }
  
  if (!existsSync(srcAppCssPath)) {
    logger.info("Creating app.css file in src directory...");
    writeFileSync(srcAppCssPath, tailwindCssContent);
    logger.success("Created app.css file in src directory.");
  }
}

/**
 * Clean up temporary files created during processing
 */
function cleanupTempFiles(): void {
  for (const tempFile of tempFiles) {
    try {
      if (existsSync(tempFile)) {
        unlinkSync(tempFile);
        logger.debug(`Cleaned up temp file: ${tempFile}`);
      }
    } catch (error) {
      logger.debug(`Failed to clean up temp file ${tempFile}: ${error}`);
    }
  }
  tempFiles.length = 0; // Clear the array
}

/**
 * Start a file watcher for Tailwind CSS that only rebuilds when relevant files change
 * Uses Node.js fs.watch API that Bun supports
 */
export function startTailwindWatcher(projectPath: string): { close: () => void } {
  // Ensure Tailwind is initialized first
  initializeTailwind(projectPath);
  
  // Set up file patterns to watch
  const cssExtensions = ['.css'];
  const jsExtensions = ['.js', '.jsx', '.ts', '.tsx'];
  
  // Track last processed time to prevent duplicate processing
  let lastProcessedTime = Date.now();
  const debounceTime = 1000; // ms - more aggressive debounce to reduce processing
  
  // Track which watchers are active
  const watchers: Array<{ close: () => void }> = [];
  
  // Process immediately on startup (just once)
  processTailwindCss(projectPath);
  
  // Helper to process changes with debouncing by file type
  const handleFileChange = async (filePath: string) => {
    const ext = extname(filePath).toLowerCase();
    const now = Date.now();
    
    // Always process CSS changes with minimal debounce
    if (cssExtensions.includes(ext)) {
      if (now - lastProcessedTime > debounceTime) {
        lastProcessedTime = now;
        // Only log if we're outside the throttle window
        if (now - lastLogTime > LOG_THROTTLE_MS) {
          logger.info(`Processing Tailwind CSS - CSS file changed: ${filePath}`);
          lastLogTime = now;
        }
        await processTailwindCss(projectPath);
      }
      return;
    }
    
    // For JS/TS files (might contain Tailwind classes), debounce more aggressively
    if (jsExtensions.includes(ext)) {
      if (now - lastProcessedTime > 2000) { // 2 second debounce for code files
        lastProcessedTime = now;
        await processTailwindCss(projectPath);
      }
    }
  };
  
  try {
    // Main directories to watch for changes
    const mainDirs = [
      join(projectPath, 'app'),
      join(projectPath, 'src'),
      join(projectPath, 'components'),
      join(projectPath, 'pages')
    ].filter(dir => existsSync(dir));
    
    // Helper to watch a directory and its immediate subdirectories
    const watchDirAndSubdirs = (dir: string) => {
      try {
        // Watch the main directory
        setupWatcher(dir);
        
        // Find and watch immediate subdirectories
        try {
          const items = Bun.spawnSync(['ls', '-la', dir], {
            stdout: 'pipe'
          });
          
          const output = new TextDecoder().decode(items.stdout);
          const lines = output.split('\n');
          
          for (const line of lines) {
            // Look for directory entries
            if (line.startsWith('d')) {
              const parts = line.split(/\s+/);
              const name = parts[parts.length - 1];
              
              // Skip . and .. entries
              if (name !== '.' && name !== '..' && !name.startsWith('.')) {
                const subdirPath = join(dir, name);
                if (existsSync(subdirPath)) {
                  setupWatcher(subdirPath);
                }
              }
            }
          }
        } catch (e) {
          // Ignore errors when reading directories
        }
      } catch (err) {
        logger.debug(`Failed to watch directory ${dir}: ${err}`);
      }
    };
    
    // Setup a watcher for a single directory
    const setupWatcher = (dir: string) => {
      try {
        // Use Node.js fs.watch API that Bun implements
        const watcher = watch(
          dir, 
          { persistent: true }, // Don't use recursive option as it's not widely supported
          (eventType: string, filename: string | Buffer | null) => {
            // Skip if no filename provided (can happen on some platforms)
            if (!filename) return;
            
            // Convert Buffer to string if needed
            const filenameStr = typeof filename === 'string' ? filename : filename.toString();
            
            // Only process on 'change' events for files we care about
            if (eventType === 'change') {
              const ext = extname(filenameStr).toLowerCase();
              if ([...cssExtensions, ...jsExtensions].includes(ext)) {
                handleFileChange(join(dir, filenameStr));
              }
            }
          }
        );
        
        watchers.push(watcher);
      } catch (err) {
        logger.debug(`Failed to watch directory ${dir}: ${err}`);
      }
    };
    
    // Watch each main directory and its subdirectories
    for (const dir of mainDirs) {
      watchDirAndSubdirs(dir);
    }
    
    logger.info(`Tailwind CSS file watcher started - monitoring ${watchers.length} directories`);
  } catch (error) {
    logger.error(`Failed to start Tailwind watcher: ${error}`);
    // Fall back to less frequent polling
    const fallbackInterval = setInterval(async () => {
      await processTailwindCss(projectPath);
    }, 10000); // Every 10 seconds
    
    // Return cleanup function for polling fallback
    return {
      close() {
        clearInterval(fallbackInterval);
        cleanupTempFiles();
        logger.info("Stopping Tailwind CSS watcher");
      }
    };
  }
  
  // Return a cleanup function that closes all watchers
  return {
    close() {
      try {
        // Close all active watchers
        for (const watcher of watchers) {
          watcher.close();
        }
        
        // Clean up all temporary files
        cleanupTempFiles();
        logger.info("Stopping Tailwind CSS watcher");
      } catch (error) {
        logger.error(`Error shutting down Tailwind watcher: ${error}`);
      }
    }
  };
}

/**
 * Process Tailwind CSS in memory without generating unnecessary files
 * With improved debouncing to prevent excessive processing and log spam
 */
export async function processTailwindCss(projectPath: string): Promise<boolean> {
  try {
    // Find Tailwind executable
    const tailwindExecutable = findTailwindExecutable(projectPath);
    
    if (!tailwindExecutable) {
      logger.warn('💠 Tailwind CSS not found locally, trying to install...');
      
      // Try to install Tailwind CSS
      try {
        logger.info('💠 Installing Tailwind CSS with Bun...');
        const installProcess = Bun.spawnSync(['bun', 'add', '-d', 'tailwindcss'], {
          cwd: projectPath,
          stdio: ['pipe', 'pipe', 'pipe']
        });
        
        if (installProcess.exitCode === 0) {
          logger.success('✅ Tailwind CSS installed successfully');
          // Retry finding the executable
          const newExecutable = findTailwindExecutable(projectPath);
          if (newExecutable) {
            return processTailwindCssWithExecutable(projectPath, newExecutable);
          }
        } else {
          logger.error('❌ Failed to install Tailwind CSS');
          return false;
        }
      } catch (installError) {
        logger.error(`Failed to install Tailwind CSS: ${installError}`);
        return false;
      }
      
      return false;
    }

    return processTailwindCssWithExecutable(projectPath, tailwindExecutable);

  } catch (error) {
    logger.error(`Failed to process Tailwind CSS: ${error}`);
    return false;
  }
}

/**
 * Process Tailwind CSS with a known executable
 */
async function processTailwindCssWithExecutable(projectPath: string, executable: string): Promise<boolean> {
  try {
    const inputCss = join(projectPath, 'src/input.css');
    const outputCss = join(projectPath, '.0x1/public/styles.css');

    // Ensure input.css exists
    if (!existsSync(inputCss)) {
      const defaultCss = `@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`;
      await Bun.write(inputCss, defaultCss);
      logger.info('💠 Created default input.css');
    }

    // Build the command
    const isPackageRunner = executable.includes(' ');
    const command = isPackageRunner ? executable.split(' ') : [executable];
    const args = [
      '--input', inputCss,
      '--output', outputCss,
      '--minify'
    ];

    const finalCommand = [...command, ...args];
    
    const process = Bun.spawnSync(finalCommand, {
      cwd: projectPath,
      stdio: ['pipe', 'pipe', 'pipe']
    });

    if (process.exitCode === 0) {
      logger.success('✅ Tailwind CSS processed successfully');
      return true;
    } else {
      const stderr = new TextDecoder().decode(process.stderr);
      logger.error(`Tailwind CSS process failed: ${stderr}`);
      return false;
    }

  } catch (error) {
    logger.error(`Error processing Tailwind CSS: ${error}`);
    return false;
  }
}

/**
 * Get the Tailwind runtime script for client-side dark mode toggling
 */
export function getTailwindRuntime(): { content: string; contentType: string } {
  const tailwindRuntime = `/* Tailwind CSS v4 Runtime */
  (function() {
    console.log('[0x1] Initializing Tailwind CSS runtime');
    
    // Add debug info to help troubleshoot
    console.log('[0x1] Tailwind runtime script loaded from:', document.currentScript?.src || 'inline');
    
    // Monitor dark mode preference changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
      const darkModeOn = e.matches;
      const userPreference = localStorage.getItem('darkMode');
      console.log('[0x1] Dark mode preference changed:', darkModeOn ? 'dark' : 'light');
      
      // Only update if user hasn't explicitly set a preference
      if (userPreference === null) {
        if (darkModeOn) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      }
    });
    
    // Function to toggle dark mode
    window.toggleDarkMode = function() {
      const isDark = document.documentElement.classList.contains('dark');
      console.log('[0x1] Toggling dark mode from', isDark ? 'dark' : 'light', 'to', !isDark ? 'dark' : 'light');
      
      if (isDark) {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('darkMode', 'light');
      } else {
        document.documentElement.classList.add('dark');
        localStorage.setItem('darkMode', 'dark');
      }
    };
  })();`;
  
  return { content: tailwindRuntime, contentType: 'application/javascript' };
}

/**
 * Process CSS content with Tailwind CSS support
 */
export async function processCssFile(filePath: string, projectPath: string): Promise<{ content: string; contentType: string } | null> {
  try {
    // Check cache first
    const stats = await stat(filePath);
    const cacheKey = `${filePath}:${stats.mtime.getTime()}`;
    
    if (cssCache[cacheKey]) {
      return { content: cssCache[cacheKey].content, contentType: cssCache[cacheKey].contentType };
    }
    
    // Get file content
    const content = readFileSync(filePath, 'utf-8');
    const isTailwindCSS = content.includes('@import "tailwindcss"') || content.includes('@tailwind');
    
    if (isTailwindCSS) {
      // Ensure CSS is processed
      await processTailwindCss(projectPath);
      
      // For now, just return the content since we process it in a separate step
      const contentType = 'text/css';
      cssCache[cacheKey] = { content, contentType, timestamp: Date.now() };
      return { content, contentType };
    }
    
    // If not Tailwind CSS, just return the content
    const contentType = 'text/css';
    cssCache[cacheKey] = { content, contentType, timestamp: Date.now() };
    return { content, contentType };
  } catch (error) {
    logger.error(`Error processing CSS file ${filePath}: ${error}`);
    return null;
  }
}

/**
 * Generate CSS module script for client-side components
 */
export async function generateCssModuleScript(filePath: string, projectPath: string): Promise<{ content: string; contentType: string } | null> {
  try {
    // Check if file exists
    if (!existsSync(filePath)) {
      return null;
    }
    
    // Get file content
    const cssContent = readFileSync(filePath, 'utf-8');
    
    // Generate a cache key
    const stats = await stat(filePath);
    const cacheKey = `${filePath}:${stats.mtime.getTime()}:module`;
    
    // Generate the JS module
    return await generateCssModuleJs(filePath, cssContent, projectPath, cacheKey);
  } catch (error) {
    logger.error(`Error generating CSS module script for ${filePath}: ${error}`);
    return null;
  }
}

/**
 * Generate JavaScript mapping for a CSS module
 */
async function generateCssModuleJs(
  filePath: string,
  cssContent: string,
  projectPath: string,
  cacheKey: string
): Promise<{ content: string; contentType: string } | null> {
  try {
    // Check cache
    if (cssCache[cacheKey]) {
      return { content: cssCache[cacheKey].content, contentType: cssCache[cacheKey].contentType };
    }
    
    // Simple CSS module implementation
    // In a real implementation, we would parse the CSS and extract the class names
    // For now, we'll just return an empty object
    const jsContent = `
/* CSS Module for ${filePath.split('/').pop()} */
export default {};
`;
    
    const contentType = 'application/javascript';
    cssCache[cacheKey] = { content: jsContent, contentType, timestamp: Date.now() };
    return { content: jsContent, contentType };
  } catch (error) {
    logger.error(`Error generating CSS module JS for ${filePath}: ${error}`);
    return null;
  }
}
