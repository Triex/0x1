#!/usr/bin/env node

/**
 * 0x1 CLI Entry Point - Direct Execution Strategy
 * Designed for maximum compatibility across all environments
 * with zero reliance on PATH configuration
 */

const { execFileSync } = require('child_process');
const { spawnSync } = require('child_process');
const path = require('path');
const fs = require('fs');
const os = require('os');

// Get home directory in a cross-platform way
const homeDir = os.homedir();
const isWindows = os.platform() === 'win32';

// Attempt to find bun executable
function findBunExecutable() {
  // Possible locations where bun might be installed
  const possiblePaths = [
    // Default bun installation
    path.join(homeDir, '.bun/bin/bun'),
    // Alternative locations
    '/usr/local/bin/bun',
    '/opt/homebrew/bin/bun',
    // Windows through WSL
    isWindows ? '/usr/bin/bun' : null,
    // Add more paths as needed
  ].filter(Boolean);

  // First try using the PATH-based "bun" command
  try {
    const result = spawnSync('bun', ['--version'], { stdio: 'pipe' });
    if (result.status === 0) {
      return 'bun'; // bun command is accessible in PATH
    }
  } catch (e) {
    // Bun not in PATH, continue searching
  }

  // If not found in PATH, try specific locations
  for (const bunPath of possiblePaths) {
    if (fs.existsSync(bunPath)) {
      return bunPath;
    }
  }

  // Last resort: try with bunx directly
  try {
    const result = spawnSync('bunx', ['--help'], { stdio: 'pipe' });
    if (result.status === 0) {
      return 'use-bunx';
    }
  } catch (e) {
    // bunx not available
  }

  return null;
}

// Find 0x1 main script
function find0x1Script() {
  const possibleScriptPaths = [
    // Local development
    path.join(__dirname, '../dist/cli/index.js'),
    // Global installations
    path.join(homeDir, '.bun/install/global/node_modules/0x1/dist/cli/index.js'),
    // Alternative paths
    path.join(homeDir, 'bun/install/global/node_modules/0x1/dist/cli/index.js'),
  ];

  for (const scriptPath of possibleScriptPaths) {
    if (fs.existsSync(scriptPath)) {
      return scriptPath;
    }
  }

  return null;
}

// Execute 0x1 command
try {
  const args = process.argv.slice(2);
  const bunPath = findBunExecutable();
  const scriptPath = find0x1Script();

  // Set up the custom PATH that includes bun's bin directory
  const env = { 
    ...process.env,
    PATH: `${homeDir}/.bun/bin:${process.env.PATH}` 
  };

  if (!bunPath) {
    throw new Error('Bun executable not found. Please install Bun: https://bun.sh');
  }

  if (bunPath === 'use-bunx') {
    // Use bunx as fallback
    const result = spawnSync('bunx', ['0x1', ...args], { 
      stdio: 'inherit',
      env 
    });
    process.exit(result.status || 0);
  } else if (scriptPath) {
    // Use Bun with the script path
    const result = spawnSync(bunPath, [scriptPath, ...args], { 
      stdio: 'inherit',
      env 
    });
    process.exit(result.status || 0);
  } else {
    // Last resort - try direct bunx execution
    const result = spawnSync('bunx', ['0x1', ...args], { 
      stdio: 'inherit',
      env 
    });
    process.exit(result.status || 0);
  }
} catch (error) {
  console.error('\nðŸ”´ Error executing 0x1 CLI:', error.message);
  
  // Provide helpful direct execution hint
  console.error('\nðŸ’¡ Direct execution method:');
  console.error(`bunx 0x1 ${process.argv.slice(2).join(' ')}`);
  
  // Provide PATH setup instructions
  console.error('\nðŸ“˜ For permanent fix, add bun to your PATH:');
  console.error('export BUN_INSTALL="$HOME/.bun"');
  console.error('export PATH="$BUN_INSTALL/bin:$PATH"');
  
  // Attempt direct execution with bunx as a last resort
  console.error('\nðŸ”„ Attempting to execute with bunx...');
  try {
    const bunxResult = spawnSync('bunx', ['0x1', ...process.argv.slice(2)], { 
      stdio: 'inherit' 
    });
    process.exit(bunxResult.status || 0);
  } catch (e) {
    console.error('\nðŸ”´ Failed to execute with bunx. Please ensure bun is installed.');
    process.exit(1);
  }
}
