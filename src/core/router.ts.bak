/**
 * 0x1 Router
 * A zero-dependency router for single page applications
 * Supports app directory pattern with file-based routing
 */

import type { Component } from './component';
// Import navigation Link component as NavigationLink to avoid naming conflicts
// import { Link as NavigationLink } from './navigation.js';


export interface RouteParams {
  [key: string]: string;
}

export interface Route {
  path: string;
  component: Component;
  exact?: boolean;
  layouts?: Component[];
  children?: Route[];
}

export interface RouterOptions {
  rootElement: HTMLElement;
  mode?: 'hash' | 'history';
  transitionDuration?: number;
  notFoundComponent?: Component;
  rootLayout?: Component; // Root layout component for the entire app
  appComponents?: Record<string, { default: Component }>; // App directory components
  autoDiscovery?: boolean; // Auto discover components from file system
  hydrate?: boolean; // Enable hydration mode for server-side rendering
  suspense?: boolean; // Enable React suspense for data fetching
}

/**
 * Router class that manages navigation and renders components
 */
export class Router {
  private routes: Route[] = [];
  private rootElement: HTMLElement;
  private mode: "hash" | "history";
  private notFoundComponent: Component;
  private currentPath: string = "";
  private transitionDuration: number;
  private rootLayout?: Component;

  private hydrate: boolean = false;
  private suspense: boolean = false;

  constructor(options: RouterOptions) {
    this.rootElement = options.rootElement;
    this.routes = []; // No initial routes - app dir only
    this.mode = options.mode || "hash";
    this.transitionDuration = options.transitionDuration || 0;
    this.rootLayout = options.rootLayout;
    this.hydrate = options.hydrate || false;
    this.suspense = options.suspense || false;
    this.notFoundComponent =
      options.notFoundComponent ||
      ((props) => {
        // Create a properly styled not-found component as a fallback
        const container = document.createElement("div");
        container.className = "flex flex-col items-center justify-center min-h-screen text-center px-4";
        
        const errorCode = document.createElement("h1");
        errorCode.className = "text-5xl font-bold text-gray-800 dark:text-gray-200 mb-4";
        errorCode.textContent = "404";
        container.appendChild(errorCode);
        
        const title = document.createElement("h2");
        title.className = "text-2xl font-semibold text-gray-700 dark:text-gray-300 mb-6";
        title.textContent = "Page Not Found";
        container.appendChild(title);
        
        const text = document.createElement("p");
        text.className = "text-gray-600 dark:text-gray-400 mb-8";
        text.textContent = "The page you are looking for doesn't exist or has been moved.";
        container.appendChild(text);
        
        const link = document.createElement("a");
        link.href = "/";
        link.className = "px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors";
        link.textContent = "Back to Home";
        container.appendChild(link);
        
        return container;
      });

    // Initialize app directory components if provided
    if (options.appComponents && Object.keys(options.appComponents).length > 0) {
      this.initAppDirectoryRoutes(options.appComponents);
    } else if (options.autoDiscovery) {
      // When autoDiscovery is enabled, we need to ensure at least a root route is registered
      // Create a minimal app structure with a root route to prevent 'Page Not Found' errors
      const dummyRoot = () => {
        const element = document.createElement("div");
        element.id = "0x1-auto-discovery-root";
        // Will be populated by the dynamic imports
        return element;
      };
      
      // Register at least the root route for auto-discovery
      this.addRoute("/", dummyRoot, true);
      
      console.log("🔍 Using automatic component discovery");
    }
  }

  /**
   * Add a route to the router
   */
  addRoute(
    path: string,
    component: Component,
    exact: boolean = true,
    layouts?: Component[]
  ): void {
    this.routes.push({ path, component, exact, layouts });
  }

  /**
   * Add a route with children (for nested routes)
   */
  addRouteWithChildren(route: Route): void {
    this.routes.push(route);
  }

  /**
   * Navigate to a specific path
   */
  navigate(path: string): void {
    if (this.mode === "hash") {
      window.location.hash = path;
    } else if (this.mode === "history") {
      window.history.pushState(null, "", path);
      this.handleRouteChange();
    }
  }

  /**
   * Replace current history state with new path (Next.js compatibility)
   */
  replaceState(path: string): void {
    if (this.mode === "hash") {
      // In hash mode, we can't replace state without triggering a navigation event
      // But we can use the history API directly
      const newUrl = window.location.href.replace(/#.*$/, '') + `#${path}`;
      history.replaceState(null, "", newUrl);
      this.handleRouteChange();
    } else {
      // In history mode, we can use the history API directly
      history.replaceState(null, "", path);
      this.handleRouteChange();
    }
  }

  /**
   * Prefetch a route (Next.js compatibility)
   * This is a stub implementation for API compatibility
   */
  preload(path: string): void {
    // In future versions, we can implement actual prefetching
    // For now, this is just a placeholder for API compatibility
    console.debug(`[0x1] Would prefetch path: ${path}`);
  }

  /**
   * Initialize the router
   */
  init(): void {
    // Validate rootElement exists
    if (!this.rootElement) {
      console.error('Router initialization error: rootElement is undefined. Make sure to provide a valid DOM element when initializing the router.');
      return;
    }
    
    // Initialize event listeners for navigation
    if (this.mode === "hash") {
      // Use the hashchange event for hash-based routing
      window.addEventListener("hashchange", () => {
        this.handleRouteChange();
      });
    } else if (this.mode === "history") {
      // Use the popstate event for history API based routing
      window.addEventListener("popstate", () => {
        this.handleRouteChange();
      });
      
      // Intercept link clicks to use history API instead of full page loads
      document.addEventListener("click", (e) => {
        // Only intercept link clicks
        if (e.target && (e.target as HTMLElement).tagName === "A") {
          const href = (e.target as HTMLAnchorElement).getAttribute("href");
          if (href && !href.startsWith("http") && !href.startsWith("//")) {
            e.preventDefault();
            this.navigate(href);
          }
        }
      });

      // Handle back/forward navigation
      window.addEventListener("popstate", () => this.handleRouteChange());

      // Handle initial route
      this.handleRouteChange();
    }

    // Make router instance available globally for use by Link components
    // This allows proper Link functionality without duplicating identifiers
    (window as any).__0x1_ROUTER__ = this;
    
    // Trigger initial route rendering (only if rootElement exists)
    if (this.rootElement) {
      this.handleRouteChange();
    }
  }

  /**
   * Handle route changes
   */
  private async handleRouteChange(): Promise<void> {
    const path = this.getPath();

    // Don't re-render if the path hasn't changed
    if (path === this.currentPath) return;

    this.currentPath = path;

    // Find the matching route
    const route = this.findMatchingRoute(path);

    if (this.transitionDuration > 0) {
      this.rootElement.style.opacity = "0";
      await new Promise((resolve) =>
        setTimeout(resolve, this.transitionDuration)
      );
    }

    try {
      // Check if rootElement exists before manipulating it
      if (!this.rootElement) {
        console.error('Router error: rootElement is undefined. Make sure to provide a valid DOM element when initializing the router.');
        return;
      }
      
      // Clear previous content
      this.rootElement.innerHTML = "";

      if (route) {
        // Extract params from the path
        const params = this.extractParams(route, path);

        // Get the component to render
        let componentFn = route.component;

        // Always apply layouts (app directory mode)
        componentFn = this.applyLayouts(componentFn, route.layouts, params);

        // Execute the component function
        const result = componentFn(params);

        // Handle the result
        this.renderResult(result);
      } else {
        // Not found case
        this.handleNotFound();
      }
    } catch (error) {
      console.error("Error rendering route:", error);
      this.rootElement.innerHTML = `
        <div class="0x1-error">
          <h1>Error</h1>
          <p>An error occurred while rendering this page.</p>
          <pre>${error}</pre>
        </div>
      `;
    }

    // Fade in if transitions enabled
    if (this.transitionDuration > 0) {
      setTimeout(() => {
        this.rootElement.style.opacity = "1";
      }, 10);
    }

    // Scroll to top on route change
    window.scrollTo(0, 0);

    // Dispatch custom event for route change
    window.dispatchEvent(
      new CustomEvent("routechange", {
        detail: { path, params: route ? this.extractParams(route, path) : {} },
      })
    );
  }

  private handleNotFound(): void {
    // Check if we have a not-found component
    const notFoundComponent = this.notFoundComponent;

    if (!notFoundComponent) {
      this.rootElement.innerHTML = `
        <div class="0x1-not-found">
          <h1>Page Not Found</h1>
          <p>The requested page could not be found.</p>
        </div>
      `;
      return;
    }

    try {
      // Get the component function
      const notFoundFn = notFoundComponent;

      if (typeof notFoundFn !== "function") {
        throw new Error("Not found component is not a function");
      }

      // Execute not found component
      const result = notFoundFn({});

      // Handle the result
      this.renderResult(result);
    } catch (error) {
      console.error("Error rendering route:", error);
      this.rootElement.innerHTML = `
        <div class="0x1-error">
          <h1>Error</h1>
          <p>An error occurred while rendering this page.</p>
          <pre>${error}</pre>
        </div>
      `;
    }
  }

  /**
   * Render the result of a component
   */
  /**
   * Render a JSX element to a DOM element
   */
  private renderElement(jsxElement: any): HTMLElement | Text | null {
    if (!jsxElement) return null;

    // Handle strings and numbers (text nodes)
    if (typeof jsxElement === 'string' || typeof jsxElement === 'number') {
      return document.createTextNode(String(jsxElement));
    }

    // Handle function components
    if (typeof jsxElement.type === 'function') {
      try {
        const result = jsxElement.type({
          ...jsxElement.props,
          children: jsxElement.children
        });
        return this.renderElement(result);
      } catch (err) {
        console.error('[0x1 ERROR] Error rendering function component:', err);
        return document.createTextNode(`[Component Error: ${err instanceof Error ? err.message : 'Unknown error'}]`);
      }
    }

    // Handle intrinsic elements (div, span, etc)
    if (typeof jsxElement.type === 'string') {
      const element = document.createElement(jsxElement.type);

      // Add attributes
      Object.entries(jsxElement.props || {}).forEach(([key, value]) => {
        if (key === 'children') return; // Skip children

        // Handle special attributes
        if (key === 'className') {
          element.className = String(value);
          return;
        }

        if (key === 'style' && typeof value === 'object' && value !== null) {
          Object.entries(value).forEach(([styleName, styleValue]) => {
            // @ts-ignore - This is fine for runtime use
            element.style[styleName] = styleValue;
          });
          return;
        }

        // Handle event handlers
        if (key.startsWith('on') && typeof value === 'function') {
          const eventName = key.toLowerCase().substring(2);
          element.addEventListener(eventName, value);
          return;
        }

        // Handle boolean attributes
        if (typeof value === 'boolean') {
          if (value) {
            element.setAttribute(key, '');
          }
          return;
        }

        // Handle all other attributes
        if (value !== undefined && value !== null) {
          element.setAttribute(key, String(value));
        }
      });

      // Add children
      (jsxElement.children || []).forEach((child: any) => {
        const childElement = this.renderElement(child);
        if (childElement) {
          element.appendChild(childElement);
        }
      });

      return element;
    }

    // If nothing worked, return null
    return null;
  }

  /**
   * Utility function to render an error message
   */
  private renderErrorMessage(message: string): void {
    this.rootElement.innerHTML = `
      <div class="0x1-error-message" style="padding: 2rem; color: #e53e3e; background-color: #fff5f5; border-left: 4px solid #e53e3e; margin: 1rem 0;">
        <h3 style="margin: 0 0 0.5rem 0;">Error</h3>
        <p style="margin: 0;">${message}</p>
      </div>
    `;
  }

  /**
   * Render the result of a component
   */
  private renderResult(result: any): void {
    console.log('[0x1 DEBUG] Router rendering result type:', result ? typeof result : 'null/undefined');
    
    // No result means we couldn't render anything
    if (!result) {
      console.error('[0x1 ERROR] Render result is null/undefined');
      this.renderErrorMessage('No content to render. Please check your component implementation.');
      return;
    }

    try {
      // Case 1: Result is a DOM element (this is the main case we now support directly)
      if (result instanceof HTMLElement || result instanceof DocumentFragment || result instanceof Text) {
        console.log('[0x1 DEBUG] Rendering DOM element directly');
        // Clear container and append element
        this.rootElement.innerHTML = '';
        this.rootElement.appendChild(result);
        return;
      }

      // Case 2: Result is a string (HTML content)
      if (typeof result === 'string') {
        console.log('[0x1 DEBUG] Rendering string result');
        this.rootElement.innerHTML = result;
        return;
      }
      
      // Case 3: If it's a function, try to call it (it might be a component function)
      if (typeof result === 'function') {
        try {
          console.log('[0x1 DEBUG] Executing function component');
          const functionResult = result({});
          this.renderResult(functionResult);
          return;
        } catch (err) {
          console.error('[0x1 ERROR] Error executing function component:', err);
          this.renderErrorMessage(`Component execution error: ${err instanceof Error ? err.message : 'Unknown error'}`);
          return;
        }
      }

      // Case 4: Handle JSX element objects (legacy support)
      if (result && typeof result === 'object') {
        // It might be a JSX element with type property
        if (result.type) {
          try {
            // For function components
            if (typeof result.type === 'function') {
              console.log('[0x1 DEBUG] Executing JSX function component');
              try {
                const functionResult = result.type({
                  ...result.props,
                  children: result.children
                });
                this.renderResult(functionResult);
                return;
              } catch (err) {
                console.error('[0x1 ERROR] Error in JSX function component:', err);
                this.renderErrorMessage(`Component error: ${err instanceof Error ? err.message : 'Unknown error'}`);
                return;
              }
            }
            
            // For intrinsic elements (div, span, etc.)
            if (typeof result.type === 'string') {
              console.log('[0x1 DEBUG] Creating DOM element from JSX');
              try {
                const element = this.renderElement(result);
                if (element) {
                  this.rootElement.innerHTML = '';
                  this.rootElement.appendChild(element);
                  return;
                }
              } catch (err) {
                console.error('[0x1 ERROR] Error rendering JSX element:', err);
                this.renderErrorMessage(`JSX rendering error: ${err instanceof Error ? err.message : 'Unknown error'}`);
                return;
              }
            }
          } catch (err) {
            console.error('[0x1 ERROR] JSX processing error:', err);
          }
        }
        
        // It might be an object with a render method (component instance)
        if (result.render && typeof result.render === 'function') {
          try {
            console.log('[0x1 DEBUG] Calling render method on object');
            const renderResult = result.render();
            this.renderResult(renderResult);
            return;
          } catch (err) {
            console.error('[0x1 ERROR] Error calling render method:', err);
          }
        }
      }
      
      // If nothing else worked, try to convert to string
      try {
        console.log('[0x1 DEBUG] Attempting to convert result to string');
        const stringResult = String(result);
        if (stringResult && stringResult.length > 0 && stringResult !== '[object Object]') {
          this.rootElement.innerHTML = stringResult;
          return;
        }
      } catch (err) {
        console.error('[0x1 ERROR] Failed to convert result to string:', err);
      }
      
      // Last resort: show detailed error message with result inspection
      console.error("[0x1 ERROR] Could not render component result:", result);
      this.renderErrorMessage(`Failed to render component. Check console for details.\n\nResult type: ${typeof result}\nResult: ${JSON.stringify(result, null, 2)}`);
    } catch (err) {
      console.error('[0x1 ERROR] Unexpected error in renderResult:', err);
      this.renderErrorMessage(`Unexpected error: ${err instanceof Error ? err.message : 'Unknown error'}`);
    }
  }

  /**
   * Get the current path from either hash or location
   */
  private getPath(): string {
    if (this.mode === "hash") {
      return window.location.hash.slice(1) || "/";
    } else {
      return window.location.pathname || "/";
    }
  }

  /**
   * Find a route that matches the current path
   * Enhanced to support both direct app directory routes and app/pages/* routes
   */
  private findMatchingRoute(path: string): Route | undefined {
    // Normalize path for matching
    const normalizedPath = path.endsWith("/") && path !== "/"
      ? path.slice(0, -1) // Remove trailing slash except for root
      : path;
    
    // Enhanced support for app/pages structure
    // This ensures both standard app directory routes and app/pages/* routes are properly matched
    const routes = [...this.routes]; // Create a copy to safely iterate

    // First check for direct matches to handle regular routes
    for (const route of routes) {
      // Exact path matching (for root or fixed paths)
      if (route.exact && route.path === normalizedPath) {
        return route;
      }
    }
    
    // Handle the scenario where URL path doesn't have "/pages" but the route might be defined in app/pages
    // This allows a URL like /about to match a component at app/pages/about/page.tsx
    for (const route of routes) {
      // Check if this route is from the app/pages structure
      // We'll match dynamic routes or routes that might be in the app/pages directory
      if (!route.exact && this.checkPathMatch(normalizedPath, route.path)) {
        return route;
      }
    }

    // Try exact matches first
    for (const route of this.routes) {
      if (route.exact && route.path === normalizedPath) {
        return route;
      }
    }

    // Then try pattern matching
    for (const route of this.routes) {
      if (!route.exact) {
        const routeRegex = this.pathToRegex(route.path);
        if (routeRegex.test(path)) {
          return route;
        }
      }

      // Check children if present (for nested routes)
      if (route.children) {
        const childRoute = this.findChildRoute(route.children, path);
        if (childRoute) {
          // Apply parent layouts to child route
          childRoute.layouts = childRoute.layouts || [];
          if (route.layouts) {
            childRoute.layouts = [...childRoute.layouts, ...route.layouts];
          }
          return childRoute;
        }
      }
    }

    return undefined;
  }

  /**
   * Check if a path matches a route pattern, with special handling for app/pages structure
   * This supports both standard app directory routes and routes defined in app/pages/*
   */
  private checkPathMatch(path: string, routePath: string): boolean {
    // Direct match
    if (path === routePath) return true;
    
    // Handle app/pages structure - allow /about to match routes from /app/pages/about
    // This is the key enhancement for supporting the app/pages directory structure
    const cleanPath = path.startsWith('/') ? path.substring(1) : path;
    const pagesPath = `/pages/${cleanPath}`;
    const routeRegex = this.pathToRegex(routePath);
    
    // Check if this is a match for either the direct path or through the pages directory
    return routeRegex.test(path) || routeRegex.test(pagesPath);
  }
  
  /**
   * Recursively find a matching child route
   */
  private findChildRoute(routes: Route[], path: string): Route | undefined {
    for (const route of routes) {
      // Try exact match
      if (route.exact && route.path === path) {
        return route;
      }

      // Try pattern matching
      if (!route.exact) {
        const routeRegex = this.pathToRegex(route.path);
        if (routeRegex.test(path)) {
          return route;
        }
      }

      // Recursively check children
      if (route.children) {
        const childRoute = this.findChildRoute(route.children, path);
        if (childRoute) {
          // Apply parent layouts to child route
          childRoute.layouts = childRoute.layouts || [];
          if (route.layouts) {
            childRoute.layouts = [...childRoute.layouts, ...route.layouts];
          }
          return childRoute;
        }
      }
    }

    return undefined;
  }

  /**
   * Convert a path pattern to a regular expression
   */
  private pathToRegex(path: string): RegExp {
    try {
      // Handle root path separately to avoid regex issues
      if (path === "/") {
        // CRITICAL FIX: Fixed root path regex pattern that was causing SyntaxError
        // Using a simpler pattern that correctly matches the root path without errors
        return new RegExp("^\/");
        // return new RegExp("^/$");
      }
      
      // Convert path pattern to regex by carefully handling special characters
      let finalPattern = "^";
      
      for (let i = 0; i < path.length; i++) {
        const char = path[i];
        
        if (char === "/") {
          // Escape forward slashes properly with a single backslash in the regex
          finalPattern += "\\/";
        } else if (char === ":") {
          // Handle named parameters (e.g., :id, :name)
          let paramName = "";
          let j = i + 1;
          
          // Extract parameter name
          while (j < path.length && /[\w\d]/.test(path[j])) {
            paramName += path[j];
            j++;
          }
          
          // Match any characters except forward slash
          // This ensures parameters don't consume multiple path segments
          finalPattern += "([^\\/]+)";
          i = j - 1;
        } else if (char === "*") {
          // Handle wildcard/catch-all pattern (matches anything, including slashes)
          finalPattern += "(.*)";
        } else if ("^$()[]{}+?.|\\*".indexOf(char) !== -1) {
          // Escape all special regex characters
          finalPattern += "\\" + char;
        } else {
          // Add normal characters as-is
          finalPattern += char;
        }
      }
      
      // Complete the pattern and return the RegExp
      return new RegExp(finalPattern);
    } catch (error) {
      console.error(`Error creating regex from path '${path}':`, error);
      // Fallback to a very permissive regex that matches any path
      return new RegExp("^\/.*$");
    }
  }

/**
 * Extract parameters from a path based on a route pattern
 */
private extractParams(route: Route, path: string): RouteParams {
  const params: RouteParams = {};

  if (!route.path.includes(":")) return params;

  const paramNames = route.path
    .match(/:\w+/g)
    ?.map((param) => param.substring(1));

  if (!paramNames) return params;

  const pathRegex = this.pathToRegex(route.path);
  const matches = path.match(pathRegex);

  if (matches) {
    paramNames.forEach((name, index) => {
      params[name] = matches[index + 1];
    });
  }

  return params;
}

  /**
   * Initialize routes from app directory components
   * This transforms file-based components into a route structure
   */
  private initAppDirectoryRoutes(
    components: Record<string, { default: Component }>
  ): void {
    // If no components provided, do nothing
    if (!components || Object.keys(components).length === 0) return;

    // Extract root layout if it exists
    const rootLayoutComponent = components["app/layout"]?.default;
    if (rootLayoutComponent && !this.rootLayout) {
      this.rootLayout = rootLayoutComponent;
    }

    // Extract not found component if it exists
    const notFoundComponent = components["app/not-found"]?.default;
    if (notFoundComponent) {
      this.notFoundComponent = notFoundComponent;
    }

    // Store all layouts by path for nested layout support
    const layoutsByPath: Record<string, Component> = {};

    // First pass: collect all layout components
    for (const [path, component] of Object.entries(components)) {
      if (path.endsWith("/layout")) {
        const routePath = path
          .replace("app", "") // Remove app prefix
          .replace(/\/layout$/, ""); // Remove /layout suffix
        layoutsByPath[routePath] = component.default;
      }
    }

    // Process page components
    const routes: Route[] = [];

    // Second pass: process all page components with their associated layouts
    for (const [path, component] of Object.entries(components)) {
      // Skip layout and not-found components, they're handled separately
      if (
        path === "app/layout" ||
        path === "app/not-found" ||
        path.endsWith("/layout")
      )
        continue;

      // Only process page components (page.ts, page.tsx, page.js, page.jsx)
      if (!path.endsWith("/page")) continue;

      // Convert file path to route path
      let routePath =
        path
          .replace("app", "") // Remove app prefix
          .replace(/\/page$/, "") // Remove /page suffix
          .replace(/\/([\w-]+)\/?/g, "/$1") || // Normalize slashes
        "/";

      // Map dynamic route segments [param] to :param format
      // Support both [param] and [...param] (catch-all) formats
      routePath = routePath
        .replace(/\[(\w+)\]/g, ":$1") // [param] -> :param
        .replace(/\[\.\.\.([\w-]+)\]/g, "*$1"); // [...param] -> *param (catch-all)

      // Collect all layouts for this route by traversing up the path
      const layouts: Component[] = [];
      let currentPath = routePath;

      while (currentPath !== "") {
        const parentPath = currentPath.substring(
          0,
          currentPath.lastIndexOf("/")
        );
        if (layoutsByPath[parentPath]) {
          layouts.unshift(layoutsByPath[parentPath]); // Add parent layouts first
        }
        currentPath = parentPath;
      }

      // Create the route with all its layouts
      routes.push({
        path: routePath,
        component: component.default,
        exact: true,
        layouts,
      });
    }

    // Add all routes
    for (const route of routes) {
      this.addRoute(route.path, route.component, route.exact, route.layouts);
    }
  }

  /**
   * Apply layouts to the component
   * @param component The page component to wrap with layouts
   * @param layouts Array of layout components to apply
   * @param params Route parameters
   * @returns A wrapped component function that handles the layout nesting
   */
  private applyLayouts(component: Component, layouts: Component[] = [], params: RouteParams = {}): Component {
    console.log('[0x1 DEBUG] Starting applyLayouts');
    
    // If no layouts, just return the component directly
    if (!layouts || layouts.length === 0 && !this.rootLayout) {
      console.log('[0x1 DEBUG] No layouts to apply, returning component directly');
      return component;
    }

    // We'll start with the page component and wrap it with layouts
    let wrappedComponent = component;
    
    // Apply specific layouts if they exist (from innermost to outermost)
    if (layouts && layouts.length > 0) {
      console.log(`[0x1 DEBUG] Applying ${layouts.length} specific layouts to component`);
      
      // Process layouts from innermost to outermost (parent layouts wrap child layouts)
      for (let i = layouts.length - 1; i >= 0; i--) {
        const currentLayout = layouts[i];
        const prevComponent = wrappedComponent;
        
        console.log(`[0x1 DEBUG] Wrapping with layout ${i}: ${currentLayout.name || 'Anonymous'}`);
        
        // Create a new component function that will execute the layout with the inner content
        wrappedComponent = (props: any = {}) => {
          try {
            // First render the inner component/page
            console.log(`[0x1 DEBUG] Executing inner component for layout ${i}`);
            const innerContent = prevComponent(props);
            console.log(`[0x1 DEBUG] Inner content type:`, typeof innerContent);
            
            // Then pass it as children to the layout
            const layoutProps = { ...props, children: innerContent, params };
            console.log(`[0x1 DEBUG] Passing to layout ${i} with props:`, Object.keys(layoutProps));
            
            // Render the layout with the inner content as children
            return currentLayout(layoutProps) || document.createDocumentFragment();
          } catch (error) {
            console.error(`[0x1 ERROR] Error in layout ${i}:`, error);
            // Fall back to showing just the inner content if we can
            try {
              return prevComponent(props);
            } catch (innerError) {
              console.error(`[0x1 ERROR] Error in inner component:`, innerError);
              return document.createDocumentFragment();
            }
          }
        };
      }
    }

    // Finally, apply the root layout if available
    if (this.rootLayout) {
      console.log('[0x1 DEBUG] Applying root layout as outermost wrapper');
      const finalComponent = wrappedComponent;
      const rootLayout = this.rootLayout; // Store in local variable to avoid TypeScript null check issues
      
      wrappedComponent = (props: any = {}) => {
        try {
          console.log('[0x1 DEBUG] Executing inner content before root layout');
          const innerContent = finalComponent(props);
          console.log('[0x1 DEBUG] Inner content type before root layout:', typeof innerContent);
          
          if (innerContent instanceof Node) {
            console.log('[0x1 DEBUG] Inner content is a DOM node');
          } else {
            console.log('[0x1 DEBUG] Inner content is NOT a DOM node, type:', typeof innerContent);
          }
          
          // Create props with children and params
          const layoutProps = { ...props, children: innerContent, params };
          console.log('[0x1 DEBUG] Passing to root layout with props:', Object.keys(layoutProps));
          
          const result = rootLayout(layoutProps);
          if (!result) {
            console.error('[0x1 ERROR] Root layout returned null/undefined');
            return document.createDocumentFragment();
          }
          return result;
        } catch (error) {
          console.error('[0x1 ERROR] Error in root layout:', error);
          // Fall back to showing just the inner content if we can
          try {
            return finalComponent(props);
          } catch (innerError) {
            console.error('[0x1 ERROR] Error in inner component:', innerError);
            return document.createDocumentFragment();
          }
        }
      };
    }

    return wrappedComponent;
  }
}

/**
 * Factory function to create a router instance
 * This allows for a more ergonomic API: createRouter() instead of new Router()
 */
export function createRouter(options: RouterOptions): Router {
  return new Router(options);
}

// Ensure createRouter is included in default exports
export default {
  Router,
  createRouter,
};
